// Copyright: Wieger Wesselink 2022 - 2024
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
/// \file multilayer_perceptron_test.cpp
/// \brief Tests for multilayer perceptrons.

#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN

#include "doctest/doctest.h"
#include "nerva/neural_networks/multilayer_perceptron.h"
#include "nerva/neural_networks/loss_functions.h"
#include "nerva/utilities/string_utility.h"
#include <iostream>

using namespace nerva;

inline
void check_equal_matrices(const std::string& name1, const eigen::matrix& X1, const std::string& name2, const eigen::matrix& X2, scalar epsilon = 1e-5)
{
  scalar error = (X2 - X1).squaredNorm();
  if (error > epsilon)
  {
    CHECK_LE(error, epsilon);
    print_cpp_matrix(name1, X1);
    print_cpp_matrix(name2, X2);
  }
}

void construct_mlp(multilayer_perceptron& M,
                   const eigen::matrix& W1,
                   const eigen::matrix& b1,
                   const eigen::matrix& W2,
                   const eigen::matrix& b2,
                   const eigen::matrix& W3,
                   const eigen::matrix& b3,
                   std::size_t batch_size = 1
                  )
{
  std::size_t N1 = W1.cols();
  std::size_t N2 = W2.cols();
  std::size_t N3 = W3.cols();
  std::size_t N4 = W3.rows();

  auto layer1 = std::make_shared<relu_layer<eigen::matrix>>(N1, N2, batch_size);
  M.layers.push_back(layer1);
  layer1->optimizer = std::make_shared<gradient_descent_linear_layer_optimizer<eigen::matrix>>(layer1->W, layer1->DW, layer1->b, layer1->Db);
  layer1->W = W1;
  layer1->b = b1;

  auto layer2 = std::make_shared<relu_layer<eigen::matrix>>(N2, N3, batch_size);
  M.layers.push_back(layer2);
  layer2->optimizer = std::make_shared<gradient_descent_linear_layer_optimizer<eigen::matrix>>(layer2->W, layer2->DW, layer2->b, layer2->Db);
  layer2->W = W2;
  layer2->b = b2;

  auto layer3 = std::make_shared<linear_layer<eigen::matrix>>(N3, N4, batch_size);
  M.layers.push_back(layer3);
  layer3->optimizer = std::make_shared<gradient_descent_linear_layer_optimizer<eigen::matrix>>(layer3->W, layer3->DW, layer3->b, layer3->Db);
  layer3->W = W3;
  layer3->b = b3;
}

void test_mlp_execution(const eigen::matrix& X,
                        const eigen::matrix& T,
                        const eigen::matrix& W1,
                        const eigen::matrix& b1,
                        const eigen::matrix& W2,
                        const eigen::matrix& b2,
                        const eigen::matrix& W3,
                        const eigen::matrix& b3,
                        const eigen::matrix& Y1,
                        const eigen::matrix& DY1,
                        const eigen::matrix& Y2,
                        const eigen::matrix& DY2,
                        scalar lr
                       )
{
  multilayer_perceptron M;
  std::size_t K = W3.cols(); // the output size of the MLP
  std::size_t N = X.rows();  // the number of examples in the dataset
  std::size_t batch_size = N;
  construct_mlp(M, W1, b1, W2, b2, W3, b3, batch_size);

  eigen::matrix Y(N, K);
  eigen::matrix DY(N, K);

  softmax_cross_entropy_loss loss;

  M.feedforward(X, Y);
  DY = loss.gradient(Y, T) / N; // take the average of the gradients in the batch

  check_equal_matrices("Y", Y, "Y1", Y1);
  check_equal_matrices("DY", DY, "DY1", DY1);

  M.backpropagate(Y, DY);
  M.optimize(lr);
  M.feedforward(X, Y);
  M.backpropagate(Y, DY);

  check_equal_matrices("Y", Y, "Y2", Y2);
  check_equal_matrices("DY", DY, "DY2", DY2);
}

TEST_CASE("test_mlp1")
{
  eigen::matrix X {
          {0.37454012, 0.95071429},
          {0.73199391, 0.59865850},
          {0.15601864, 0.15599452},
          {0.05808361, 0.86617613},
          {0.60111499, 0.70807260},
  };

  eigen::matrix T {
          {0.00000000, 1.00000000, 0.00000000},
          {1.00000000, 0.00000000, 0.00000000},
          {0.00000000, 1.00000000, 0.00000000},
          {0.00000000, 1.00000000, 0.00000000},
          {0.00000000, 1.00000000, 0.00000000},
  };

  eigen::matrix W1 {
          {0.07203292, 0.34829059},
          {-0.00525091, -0.25272295},
          {0.31909034, -0.47297817},
          {-0.50061983, 0.05795765},
          {0.47632402, -0.02314241},
          {-0.15462136, -0.44796258},
  };

  eigen::matrix b1 {
          {0.20716128, 0.47731802, 0.58731961, -0.16309203, -0.37192908, 0.38592747},
  };

  eigen::matrix W2 {
          {-0.13721785, -0.30246925, 0.31025577, -0.38115519, 0.27113914, 0.19373760},
          {-0.34164295, -0.18267681, 0.17310508, 0.27340746, 0.03028537, -0.06905714},
          {0.36054638, 0.40797505, 0.29228848, 0.36476463, 0.36421472, 0.39791843},
          {0.29118678, -0.19136761, 0.13228866, -0.22159405, -0.10222234, -0.00757925},
  };

  eigen::matrix b2 {
          {0.02478795, -0.21221976, -0.23755720, 0.12722076},
  };

  eigen::matrix W3 {
          {-0.46750104, -0.41372854, 0.12543637, -0.33245975},
          {0.29304045, 0.12101966, -0.30689794, -0.42822093},
          {-0.07479066, -0.26916826, -0.21294153, 0.10955930},
  };

  eigen::matrix b3 {
          {0.48424625, 0.02016318, 0.16812485},
  };

  eigen::matrix Y1 {
          {0.40809974, -0.14224690, 0.16965318},
          {0.40688789, -0.15580057, 0.14851736},
          {0.41900811, -0.13630195, 0.11493213},
          {0.41388401, -0.12202239, 0.17242637},
          {0.41476208, -0.15467957, 0.15691455},
  };

  eigen::matrix DY1 {
          {0.08458088, -0.15121800, 0.06663711},
          {-0.11460234, 0.04864895, 0.06595339},
          {0.08651646, -0.15034871, 0.06383226},
          {0.08436609, -0.15063414, 0.06626805},
          {0.08552293, -0.15160760, 0.06608468},
  };

  eigen::matrix Y2 {
          {0.40637705, -0.13379903, 0.16631858},
          {0.40420824, -0.14661820, 0.14494683},
          {0.41629183, -0.12729290, 0.11131868},
          {0.41216001, -0.11373575, 0.16911919},
          {0.41210440, -0.14555910, 0.15338397},
  };

  eigen::matrix DY2 {
          {0.08441570, -0.15081556, 0.06639986},
          {-0.11482456, 0.04910136, 0.06572319},
          {0.08628849, -0.14989547, 0.06360697},
          {0.08420112, -0.15023497, 0.06603386},
          {0.08530298, -0.15116018, 0.06585722},
  };

  scalar lr = 0.01;
  test_mlp_execution(X, T, W1, b1, W2, b2, W3, b3, Y1, DY1, Y2, DY2, lr);
}

TEST_CASE("test_mlp2")
{
  eigen::matrix X {
          {0.00077877, 0.99221158, 0.61748153},
          {0.61165315, 0.00706631, 0.02306242},
          {0.52477467, 0.39986098, 0.04666566},
          {0.97375554, 0.23277134, 0.09060644},
  };

  eigen::matrix T {
          {0.00000000, 1.00000000, 0.00000000, 0.00000000},
          {0.00000000, 0.00000000, 1.00000000, 0.00000000},
          {0.00000000, 0.00000000, 0.00000000, 1.00000000},
          {0.00000000, 0.00000000, 1.00000000, 0.00000000},
  };

  eigen::matrix W1 {
          {-0.46368718, -0.36315644, 0.28930330},
          {0.10661616, -0.00519516, -0.50633395},
          {0.13554125, 0.29102248, -0.26453966},
          {-0.29189712, -0.01410827, -0.13478424},
          {0.20930643, 0.15279987, -0.20127870},
  };

  eigen::matrix b1 {
          {-0.24893239, -0.38996530, 0.01268186, 0.46387535, -0.51512069},
  };

  eigen::matrix W2 {
          {-0.42868882, 0.41920659, -0.26038173, 0.31372261, 0.39895874},
          {0.16514431, 0.37336513, -0.30153498, 0.01206270, -0.20678504},
  };

  eigen::matrix b2 {
          {-0.00010401, 0.00611350},
  };

  eigen::matrix W3 {
          {-0.60455859, 0.33791420},
          {0.31700018, -0.61065781},
          {-0.52655214, -0.49478057},
          {-0.32914394, 0.41496050},
  };

  eigen::matrix b3 {
          {0.34318778, 0.27062753, 0.35651040, -0.26020166},
  };

  eigen::matrix Y1 {
          {0.29550764, 0.29562861, 0.31498244, -0.28616047},
          {0.30415145, 0.29109621, 0.32251096, -0.28145447},
          {0.31615406, 0.28480265, 0.33296487, -0.27491981},
          {0.34178200, 0.27136463, 0.35528603, -0.26096702},
  };

  eigen::matrix DY1 {
          {0.06985676, -0.18013480, 0.07123054, 0.03904749},
          {0.07017884, 0.06926860, -0.17852080, 0.03907337},
          {0.07062506, 0.06844521, 0.07182236, -0.21089262},
          {0.07157366, 0.06670699, -0.17745325, 0.03917262},
  };

  eigen::matrix Y2 {
          {0.29229370, 0.29559070, 0.31678230, -0.28542894},
          {0.30119383, 0.29092398, 0.32453188, -0.28058499},
          {0.31313321, 0.28466368, 0.33492780, -0.27408692},
          {0.33885014, 0.27117920, 0.35732019, -0.26009035},
  };

  eigen::matrix DY2 {
          {0.06965209, -0.18011789, 0.07137883, 0.03908700},
          {0.06998295, 0.06926791, -0.17836457, 0.03911370},
          {0.07042579, 0.06844907, 0.07197754, -0.21085238},
          {0.07137549, 0.06670524, -0.17729396, 0.03921323},
  };

  scalar lr = 0.01;
  test_mlp_execution(X, T, W1, b1, W2, b2, W3, b3, Y1, DY1, Y2, DY2, lr);
}

TEST_CASE("test_mlp3")
{
  eigen::matrix X {
          {0.98323089, 0.46676290, 0.85994041, 0.68030757, 0.45049927, 0.01326496},
          {0.94220173, 0.56328821, 0.38541651, 0.01596625, 0.23089382, 0.24102546},
          {0.68326354, 0.60999668, 0.83319491, 0.17336465, 0.39106062, 0.18223609},
          {0.75536144, 0.42515588, 0.20794167, 0.56770033, 0.03131329, 0.84228480},
          {0.44975412, 0.39515024, 0.92665887, 0.72727197, 0.32654077, 0.57044399},
          {0.52083427, 0.96117204, 0.84453386, 0.74732012, 0.53969210, 0.58675116},
          {0.96525532, 0.60703427, 0.27599919, 0.29627350, 0.16526695, 0.01563641},
          {0.42340147, 0.39488152, 0.29348817, 0.01407982, 0.19884241, 0.71134198},
  };

  eigen::matrix T {
          {0.00000000, 0.00000000, 1.00000000},
          {1.00000000, 0.00000000, 0.00000000},
          {0.00000000, 0.00000000, 1.00000000},
          {1.00000000, 0.00000000, 0.00000000},
          {0.00000000, 1.00000000, 0.00000000},
          {0.00000000, 0.00000000, 1.00000000},
          {0.00000000, 1.00000000, 0.00000000},
          {1.00000000, 0.00000000, 0.00000000},
  };

  eigen::matrix W1 {
          {-0.04500923, 0.07389066, 0.40816659, 0.20764220, -0.25434431, -0.39974678},
          {0.30900380, 0.36073574, -0.38539574, 0.13184710, -0.26840273, 0.32144192},
  };

  eigen::matrix b1 {
          {0.35952091, -0.27039006},
  };

  eigen::matrix W2 {
          {0.02285581, -0.46244222},
          {0.27013490, 0.06495512},
  };

  eigen::matrix b2 {
          {-0.50685763, 0.54019815},
  };

  eigen::matrix W3 {
          {0.63614237, 0.29472423},
          {0.66142660, 0.56787699},
          {0.04756407, 0.67559642},
  };

  eigen::matrix b3 {
          {0.06032900, 0.25463027, -0.60753155},
  };

  eigen::matrix Y1 {
          {0.27703112, 0.67217368, -0.11078519},
          {0.25032222, 0.62071073, -0.17201003},
          {0.26552495, 0.65000349, -0.13716078},
          {0.24380693, 0.60815698, -0.18694508},
          {0.26624340, 0.65138775, -0.13551396},
          {0.26318127, 0.64548767, -0.14253327},
          {0.26098087, 0.64124787, -0.14757720},
          {0.23335320, 0.58801472, -0.21090811},
  };

  eigen::matrix DY1 {
          {0.03951778, 0.05866794, -0.09818573},
          {-0.08472696, 0.05832733, 0.02639963},
          {0.03984229, 0.05852227, -0.09836455},
          {-0.08454166, 0.05824293, 0.02629873},
          {0.03982198, -0.06646860, 0.02664661},
          {0.03990854, 0.05849240, -0.09840094},
          {0.03997080, -0.06653571, 0.02656491},
          {-0.08424351, 0.05810646, 0.02613705},
  };

  eigen::matrix Y2 {
          {0.27778944, 0.66913283, -0.10805503},
          {0.25101992, 0.61771101, -0.16949421},
          {0.26626009, 0.64698595, -0.13451630},
          {0.24447528, 0.60513926, -0.18451497},
          {0.26698047, 0.64836979, -0.13286293},
          {0.26391143, 0.64247441, -0.13990676},
          {0.26169550, 0.63821781, -0.14499250},
          {0.23401979, 0.58505523, -0.20851156},
  };

  eigen::matrix DY2 {
          {0.03957146, 0.05852485, -0.09809630},
          {-0.08467300, 0.05818992, 0.02648310},
          {0.03989600, 0.05838166, -0.09827767},
          {-0.08448724, 0.05810671, 0.02638054},
          {0.03987568, -0.06660934, 0.02673366},
          {0.03996227, 0.05835230, -0.09831457},
          {0.04002485, -0.06667547, 0.02665062},
          {-0.08418962, 0.05797269, 0.02621693},
  };

  scalar lr = 0.01;
  test_mlp_execution(X, T, W1, b1, W2, b2, W3, b3, Y1, DY1, Y2, DY2, lr);
}
