=== Command line arguments ===
Namespace(debug=False, batch_size=100, seed=1, precision=4, edgeitems=3, density=0.01, sizes='3072,8192,8192,8192,10', epochs=1, lr=0.1, momentum=0.9, gamma=0.1, nesterov=True, datadir='./data', augmented=False, preprocessed=None, copy=False, nerva=False, torch=True, scheduler='multistep', export_weights_npz=None, import_weights_npz=None, custom_masking=True)
Setting gamma to 1.0
Files already downloaded and verified
initialize by ER
Overall sparsity 0.009999999999999998
Total Model parameters: 159465472
Total parameters under sparsity level of 0.01: 0.010003732971109883
initialize by ER
Overall sparsity 0.009999999999999998
Total Model parameters: 318930944
Total parameters under sparsity level of 0.01: 0.000610213601600226
Use MLP1 variant with custom masking
Setting masks with densities [0.015377149951550385, 0.008387536337209301, 0.008387536337209301, 1.0]
--- masks ---
mask1 (8192x3072)
tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], dtype=torch.int32)
mask2 (8192x8192)
tensor([[0, 0, 1,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], dtype=torch.int32)
mask3 (8192x8192)
tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 1],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], dtype=torch.int32)

=== PyTorch model ===
MLP1a(
  (layers): ModuleList(
    (0): Linear(in_features=3072, out_features=8192, bias=True)
    (1): Linear(in_features=8192, out_features=8192, bias=True)
    (2): Linear(in_features=8192, out_features=8192, bias=True)
    (3): Linear(in_features=8192, out_features=10, bias=True)
  )
  (loss): CrossEntropyLoss()
)
CrossEntropyLoss()
<torch.optim.lr_scheduler.MultiStepLR object at 0x7f62ed2a8070>

=== Training PyTorch model ===
epoch   0  lr: 0.10000000  loss: 2.30268240  train accuracy: 0.09766000  test accuracy: 0.09810000  time: 0.00000000s
epoch   1  lr: 0.10000000  loss: 1.96609604  train accuracy: 0.26004000  test accuracy: 0.26390000  time: 456.11684646s
Accuracy of the network on the 10000 test images: 26.390 %
