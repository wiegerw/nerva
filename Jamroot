import feature : feature ;
import os ;

local MKLROOT = [ os.environ MKLROOT ] ;

# Define a feature for the number type
feature.feature scalar : float double : composite optional propagated ;
feature.compose <scalar>double : <define>NERVA_USE_DOUBLE ;

project nerva
   : requirements
       <include>include
       <include>/usr/include/eigen3
       <include>/usr/include/python3.10  # TODO: find a better way for this
       <cxxflags>-std=c++17
       <define>FMT_HEADER_ONLY

       <define>EIGEN_USE_MKL_ALL
       <include>$(MKLROOT)/include
       <linkflags>-L$(MKLROOT)/lib/intel64
       <linkflags>"-Wl,--start-group -lmkl_intel_ilp64 -lmkl_intel_thread -lmkl_core -Wl,--end-group"
       <linkflags>-liomp5
       <linkflags>-lpthread
       <linkflags>-lm
       <linkflags>-ldl
       <linkflags>-ltbb  # it seems MKL requires this now...

       <toolset>clang:<cxxflags>-fopenmp=libomp
       <toolset>clang:<cxxflags>-DMKL_ILP64
       #<toolset>clang:<cxxflags>-m64

       <toolset>gcc:<cxxflags>-march=native
       <toolset>gcc:<cxxflags>-m64
       <toolset>gcc:<cxxflags>-DMKL_ILP64
       <toolset>gcc:<cxxflags>-Wno-unused-value
       <toolset>gcc:<cxxflags>-Wno-write-strings
   ;

lib nervalib
       :
         src/logger.cpp
         src/utilities.cpp
       :
       ;

# generate tests for all .cpp files
rule test_all
{
  local all_rules = ;

  for local fileb in [ glob *.cpp ]
  {
    all_rules += [ run $(fileb) ] ;
  }

  return $(all_rules) ;
}
