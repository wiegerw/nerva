// Copyright: Wieger Wesselink 2022
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
/// \file nerva/neural_networks/regrowth.h
/// \brief Algorithms for pruning and growing sparse matrices.

#ifndef NERVA_NEURAL_NETWORKS_REGROWTH_H
#define NERVA_NEURAL_NETWORKS_REGROWTH_H

#include "nerva/neural_networks/mkl_matrix.h"
#include "nerva/neural_networks/weights.h"
#include <algorithm>
#include <memory>
#include <random>
#include <vector>

namespace nerva {

struct accept_zero
{
  template <typename T>
  bool operator()(T x) const
  {
    return x == 0;
  }
};

struct accept_nonzero
{
  template <typename T>
  bool operator()(T x) const
  {
    return x != 0;
  }
};

struct accept_negative
{
  template <typename T>
  bool operator()(T x) const
  {
    return x < 0;
  }
};

struct accept_positive
{
  template <typename T>
  bool operator()(T x) const
  {
    return x > 0;
  }
};

struct compare_less_absolute
{
  template <typename T>
  bool operator()(T x, T y) const
  {
    return std::fabs(x) < std::fabs(y);
  }
};

/// Generic version of `std::nth_element` applied to the elements of an Eigen matrix.
/// \param A a matrix
/// \param n the index of the position (1, 2, ...)
/// \param accept a predicate function; only values \a x for which `accept(x) = true` are considered
/// \param comp comparison function object
/// \return The value of the n-th element
template <typename Scalar = scalar, int MatrixLayout = eigen::default_matrix_layout, typename Accept=accept_nonzero, typename Compare = std::less<Scalar>>
scalar nth_element(const Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic, MatrixLayout>& A, long k, Accept accept = Accept(), Compare comp = Compare())
{
  assert(k > 0);
  long N = A.rows() * A.cols();
  const scalar* data = A.data();

  // copy the non-zero entries of A
  std::vector<scalar> values;
  for (long i = 0; i < N; i++)
  {
    auto value = data[i];
    if (accept(value))
    {
      values.push_back(value);
    }
  }

  auto kth_element = values.begin() + k - 1;
  std::nth_element(values.begin(), kth_element, values.end(), comp);
  return *kth_element;
}

/// Returns the absolute value of the k-th smallest entry in the matrix \a A
/// \param A A matrix
/// \param k A positive number
/// \return The k-th smallest entry
template <typename Scalar = scalar, int MatrixLayout = eigen::default_matrix_layout>
scalar find_k_smallest_absolute_value(const Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic, MatrixLayout>& A, long k)
{
  return nth_element(A, k, accept_nonzero(), compare_less_absolute());
}

/// Overwrites entries `A[i,j]` that satisfy the predicate \a accept with another value
/// \param A A matrix
/// \param accept A predicate that determines if an element is pruned
/// \param value The value that is assigned to pruned elements
/// \return The number of entries that were pruned
template <typename Scalar = scalar, int MatrixLayout = eigen::default_matrix_layout, typename Accept>
long prune(Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic, MatrixLayout>& A, Accept accept, scalar value = 0)
{
  long N = A.rows() * A.cols();
  scalar* data = A.data();

  long count = 0;
  for (long i = 0; i < N; i++)
  {
    if (accept(data[i]))
    {
      data[i] = value;
      count++;
    }
  }
  return count;
}

/// Gives \a k random zero entries of \a A a new value generated by the function \a f
/// \tparam Function A function type
/// \param A A matrix
/// \param f A function that generates new values
/// \param count The number of zero entries in \a A that will get a new value
/// \param rng A random number generator
/// \param accept A predicate that determines if an element may get a new value
template <typename Function, typename Scalar = scalar, int MatrixLayout = eigen::default_matrix_layout, typename Accept=accept_zero>
void grow(Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic, MatrixLayout>& A, long k, Function f, std::mt19937& rng, Accept accept=Accept())
{
  long N = A.rows() * A.cols();
  scalar* data = A.data();

  // use reservoir sampling to randomly select k pointers to zero-entries in A
  std::vector<scalar*> selection;
  selection.reserve(k);

  long i = 0;
  for (; i < N; i++)
  {
    if (!accept(*(data + i)))
    {
      continue;
    }
    selection.push_back(data + i);
    if (static_cast<long>(selection.size()) == k)
    {
      break;
    }
  }

  i += 1; // position i has already been handled

  for (; i < N; i++)
  {
    if (!accept(*(data + i)))
    {
      continue;
    }
    std::uniform_int_distribution<long> dist(0, i - 1);
    long j = dist(rng);
    if (j < k)
    {
      selection[j] = data + i;
    }
  }

  // assign new values to the chosen entries
  for (scalar* x: selection)
  {
    *x = f();
  }
}

template <typename Scalar = scalar, int MatrixLayout = eigen::default_matrix_layout, typename Function>
void regrow_threshold(Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic, MatrixLayout>& W, long k, Function f, std::mt19937& rng)
{
  scalar threshold = nth_element(W, k, accept_nonzero(), compare_less_absolute());
  scalar max_scalar = std::numeric_limits<scalar>::max();
  auto accept = [threshold](scalar x) { return x != 0 && std::fabs(x) <= threshold; };

  // prune elements by giving them the value max_scalar
  long count = prune(W, accept, max_scalar);

  // grow elements that are equal to zero
  grow(W, count, f, rng, accept_zero());

  // replace max_scalar by 0
  W = W.unaryExpr([max_scalar](scalar x) { return x == max_scalar ? 0 : x; });
}

/// Prunes and regrows a given fraction of the smallest elements (in absolute value) of the matrix \a W.
/// \param W A sparse matrix
/// \param zeta The fraction of entries in \a W that will get a new value
/// \param rng A random number generator
template <typename Scalar = scalar, typename Function>
void regrow_threshold(mkl::sparse_matrix_csr<Scalar>& W, scalar zeta, Function f, std::mt19937& rng)
{
  auto W1 = mkl::to_eigen(W);
  long nonzero_count = (W1.array() != 0).count();
  long k = std::lround(zeta * static_cast<scalar>(nonzero_count));
  regrow_threshold(W1, k, f, rng);
  W = mkl::to_csr(W1);
}

template <typename Scalar = scalar, int MatrixLayout = eigen::default_matrix_layout, typename Function>
void regrow_interval(Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic, MatrixLayout>& W, long k_negative, long k_positive, Function f, std::mt19937& rng)
{
  scalar negative_threshold = nth_element(W, k_negative, accept_negative(), std::greater<>());
  scalar positive_threshold = nth_element(W, k_positive, accept_positive());
  scalar max_scalar = std::numeric_limits<scalar>::max();
  auto accept = [negative_threshold, positive_threshold](scalar x)
  {
    return (negative_threshold <= x && x < 0) || (0 < x && x <= positive_threshold);
  };

  // prune elements by giving them the value max_scalar
  long count = prune(W, accept, max_scalar);

  // grow elements that are equal to zero
  grow(W, count, f, rng, accept_zero());

  // replace max_scalar by 0
  W = W.unaryExpr([max_scalar](scalar x) { return x == max_scalar ? 0 : x; });
}

/// Prunes and regrows a given fraction of the smallest elements of matrix \a W.
/// Positive and negative entries are pruned independently.
/// \param W A sparse matrix
/// \param zeta The fraction of positive and negative entries in \a W that will get a new value
/// \param rng A random number generator
template <typename Scalar = scalar, typename Function>
void regrow_interval(mkl::sparse_matrix_csr<Scalar>& W, scalar zeta, Function f, std::mt19937& rng)
{
  auto W1 = mkl::to_eigen(W);
  long negative_count = (W1.array() < 0).count();
  long positive_count = (W1.array() > 0).count();
  long k_negative = std::lround(zeta * static_cast<scalar>(negative_count));
  long k_positive = std::lround(zeta * static_cast<scalar>(positive_count));
  regrow_interval(W1, k_negative, k_positive, f, rng);
  W = mkl::to_csr(W1);
}

template <typename Matrix, typename Action>
void apply_weight_initializer(Matrix& W, weight_initialization w, std::mt19937& rng, Action apply)
{
  switch(w)
  {
    case weight_initialization::he: apply(he_weight_initializer(rng, W.cols())); return;
    case weight_initialization::xavier: apply(xavier_weight_initializer(rng, W.cols())); return;
    case weight_initialization::xavier_normalized: apply(xavier_normalized_weight_initializer(rng, W.rows(), W.cols())); return;
    case weight_initialization::zero: apply(zero_weight_initializer(rng)); return;
    default: apply(uniform_weight_initializer(rng)); return;
  }
}

/// Prunes and regrows a given fraction of the smallest elements of matrix \a W.
/// Positive and negative entries are pruned independently.
/// \param W A sparse matrix
/// \param zeta The fraction of positive and negative entries in \a W that will get a new value
/// \param rng A random number generator
template <typename Scalar = scalar>
void regrow(mkl::sparse_matrix_csr<Scalar>& W, scalar zeta, weight_initialization w, bool separate_positive_negative, std::mt19937& rng)
{
  if (separate_positive_negative)
  {
    apply_weight_initializer(W, w, rng, [&W, zeta, &rng](auto f) { regrow_interval(W, zeta, f, rng); });
  }
  else
  {
    apply_weight_initializer(W, w, rng, [&W, zeta, &rng](auto f) { regrow_threshold(W, zeta, f, rng); });
  }
}

} // namespace nerva

#endif // NERVA_NEURAL_NETWORKS_REGROWTH_H
